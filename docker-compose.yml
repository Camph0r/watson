version: '3.8'

services:
  aggregator:
    container_name: watson-aggregator
    build:
      context: ./aggregator
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "9080:9080"
    environment:
      - AGGREGATOR_PORT=${AGGREGATOR_PORT}
      - AGGREGATOR_CERT_FILE=/app/certs/server.crt
      - AGGREGATOR_KEY_FILE=/app/certs/server.key
      - AGGREGATOR_CA_CERT_FILE=/app/certs/ca.crt
      - CERTREG_URL=certregistry:9081
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_TOKEN=${INFLUX_TOKEN}
      - INFLUX_ORG=${INFLUX_ORG}
      - INFLUX_BUCKET=${INFLUX_BUCKET}
    volumes:
      - ./aggregator/certs:/app/certs:ro
    networks:
      - watson-net
    depends_on:
      influxdb:
        condition: service_healthy
      certregistry:
        condition: service_healthy

  certregistry:
    container_name: watson-certregistry
    build:
      context: ./certregistry
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - CERTREG_PORT=9081
      - CERTREG_CA_CERT_FILE=/app/certs/ca.crt
      - CERTREG_KEY_FILE=/app/certs/server.key
    volumes:
      - ./certregistry/certs:/app/certs:ro
    networks:
      - watson-net
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "9081:9081"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9081"]
      interval: 5s
      timeout: 10s
      retries: 5

  influxdb:
    container_name: watson-influxdb
    image: influxdb:2
    env_file:
      - .env
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUX_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUX_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUX_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUX_TOKEN}
    volumes:
      - influxdb-data:/var/lib/influxdb2
    networks:
      - watson-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 5s
      timeout: 10s
      retries: 5

  redis:
    container_name: watson-redis
    image: redis:7-alpine
    volumes:
      - redis-data:/data
      - ./init-redis.sh:/init-redis.sh
    command: sh -c "redis-server --appendonly yes & sleep 5 && chmod +x /init-redis.sh && /init-redis.sh && wait"
    networks:
      - watson-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 5
  ueba:
    container_name: watson-ueba
    build:
      context: ./ueba
      dockerfile: Dockerfile
    env_file:
      - .env

    environment:
      - INFLUX_URL=${INFLUX_URL}
      - INFLUX_TOKEN=${INFLUX_TOKEN}
      - USERS=${USERS}
      - INFLUX_ORG=${INFLUX_ORG}

    networks:
      - watson-net
    depends_on:
      influxdb:
        condition: service_healthy
    command: ["python", "main.py"]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: watson-cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    networks:
      - watson-net
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: watson-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - watson-net
    restart: unless-stopped
    depends_on:
      - cadvisor

  grafana:
    image: grafana/grafana:10.2.2
    container_name: watson-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - watson-net
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  watson-net:
    driver: bridge

volumes:
  influxdb-data:
  redis-data:
  grafana-data:
  prometheus-data:
