// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: certregistry.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CertRegistry_GenerateCertificate_FullMethodName = "/certregistry.CertRegistry/GenerateCertificate"
	CertRegistry_ValidateDevice_FullMethodName      = "/certregistry.CertRegistry/ValidateDevice"
	CertRegistry_RevokeDevice_FullMethodName        = "/certregistry.CertRegistry/RevokeDevice"
)

// CertRegistryClient is the client API for CertRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertRegistryClient interface {
	GenerateCertificate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
	ValidateDevice(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	RevokeDevice(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error)
}

type certRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewCertRegistryClient(cc grpc.ClientConnInterface) CertRegistryClient {
	return &certRegistryClient{cc}
}

func (c *certRegistryClient) GenerateCertificate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, CertRegistry_GenerateCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certRegistryClient) ValidateDevice(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, CertRegistry_ValidateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certRegistryClient) RevokeDevice(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeResponse)
	err := c.cc.Invoke(ctx, CertRegistry_RevokeDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertRegistryServer is the server API for CertRegistry service.
// All implementations must embed UnimplementedCertRegistryServer
// for forward compatibility.
type CertRegistryServer interface {
	GenerateCertificate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	ValidateDevice(context.Context, *ValidateRequest) (*ValidateResponse, error)
	RevokeDevice(context.Context, *RevokeRequest) (*RevokeResponse, error)
	mustEmbedUnimplementedCertRegistryServer()
}

// UnimplementedCertRegistryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCertRegistryServer struct{}

func (UnimplementedCertRegistryServer) GenerateCertificate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCertificate not implemented")
}
func (UnimplementedCertRegistryServer) ValidateDevice(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDevice not implemented")
}
func (UnimplementedCertRegistryServer) RevokeDevice(context.Context, *RevokeRequest) (*RevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeDevice not implemented")
}
func (UnimplementedCertRegistryServer) mustEmbedUnimplementedCertRegistryServer() {}
func (UnimplementedCertRegistryServer) testEmbeddedByValue()                      {}

// UnsafeCertRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertRegistryServer will
// result in compilation errors.
type UnsafeCertRegistryServer interface {
	mustEmbedUnimplementedCertRegistryServer()
}

func RegisterCertRegistryServer(s grpc.ServiceRegistrar, srv CertRegistryServer) {
	// If the following call pancis, it indicates UnimplementedCertRegistryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CertRegistry_ServiceDesc, srv)
}

func _CertRegistry_GenerateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertRegistryServer).GenerateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertRegistry_GenerateCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertRegistryServer).GenerateCertificate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertRegistry_ValidateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertRegistryServer).ValidateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertRegistry_ValidateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertRegistryServer).ValidateDevice(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertRegistry_RevokeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertRegistryServer).RevokeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertRegistry_RevokeDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertRegistryServer).RevokeDevice(ctx, req.(*RevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CertRegistry_ServiceDesc is the grpc.ServiceDesc for CertRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CertRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "certregistry.CertRegistry",
	HandlerType: (*CertRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateCertificate",
			Handler:    _CertRegistry_GenerateCertificate_Handler,
		},
		{
			MethodName: "ValidateDevice",
			Handler:    _CertRegistry_ValidateDevice_Handler,
		},
		{
			MethodName: "RevokeDevice",
			Handler:    _CertRegistry_RevokeDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "certregistry.proto",
}
